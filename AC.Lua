repeat task.wait() until game:IsLoaded()

-- üßº Xo√° GUI c≈© n·∫øu t·ªìn t·∫°i
pcall(function()
    local oldUI = game.CoreGui:FindFirstChild("MacLib")
    if oldUI then oldUI:Destroy() end
end)

getgenv()._PiaHubarxLoaded = true

--// Services
local HttpService = game:GetService("HttpService")

--// Lib
local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/thaemmayanh/thaem/refs/heads/main/lib"))()

--// Setup Settings
local folderName   = "PIAHUB"
local macroFolder  = folderName.."/Macro"
local fileName     = "settings.json"

-- T·∫°o folder n·∫øu ch∆∞a c√≥
if not isfolder(folderName) then makefolder(folderName) end
if not isfolder(macroFolder) then makefolder(macroFolder) end

-- Default settings (ch·ªâ gi·ªØ 2 key c∆° b·∫£n)
local defaultSettings = {
    selectedMacro = "",
    playMacro     = false,
}

-- H√†m load/save settings
local function loadSettings()
    if isfile(folderName.."/"..fileName) then
        return HttpService:JSONDecode(readfile(folderName.."/"..fileName))
    else
        writefile(folderName.."/"..fileName, HttpService:JSONEncode(defaultSettings))
        return table.clone(defaultSettings)
    end
end

local function saveSettings(tbl)
    writefile(folderName.."/"..fileName, HttpService:JSONEncode(tbl))
end

local settings = loadSettings()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- H√†m l·∫•y danh s√°ch macro (kh√¥ng k√®m .json)
local function listMacros()
    local files = listfiles(macroFolder)
    local names = {}
    for _, path in ipairs(files) do
        if path:match("%.json$") then
            local name = path:match("([^/\\]+)%.json$")
            if name then table.insert(names, name) end
        end
    end
    table.sort(names)
    return names
end

--// Record & Play Macro
local spawnRemote = ReplicatedStorage
    :WaitForChild("endpoints")
    :WaitForChild("client_to_server")
    :WaitForChild("spawn_unit")

-- Bi·∫øn ƒëi·ªÅu khi·ªÉn
local Recording = false
local MacroData = {}
local pendingRecord = nil

----------------------------------------------------------------
-- H√†m ph·ª• tr·ª£
----------------------------------------------------------------
-- Chuy·ªÉn Vector3 -> table
local function vecToTable(v)
    return {x = v.X, y = v.Y, z = v.Z}
end

-- Chuy·ªÉn table -> Vector3
local function tableToVec(t)
    if not t then return Vector3.new(0,0,0) end
    return Vector3.new(t.x, t.y, t.z)
end

-- L·∫•y ti·ªÅn hi·ªán c√≥
local function getCurrentMoney()
    local stats = LocalPlayer:FindFirstChild("_stats")
    if stats and stats:FindFirstChild("resource") then
        return stats.resource.Value
    end
    return 0
end

----------------------------------------------------------------
-- B·∫Øt Cost t·ª´ GUI MoneyChange
----------------------------------------------------------------
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local moneyFolder = PlayerGui:WaitForChild("spawn_units")
    :WaitForChild("Lives")
    :WaitForChild("Frame")
    :WaitForChild("Resource")
    :WaitForChild("Money")

moneyFolder.ChildAdded:Connect(function(child)
    if child.Name == "MoneyChange" and pendingRecord then
        local textObj = child:WaitForChild("text", 1)
        if textObj then
            local raw = textObj.Text
            local clean = raw:gsub("%+", ""):gsub("[^%d%-]", "")
            local num = tonumber(clean) or 0
            if num < 0 then
                pendingRecord.Cost = -num
                warn(("üí∏ Recorded %s | Cost %d"):format(pendingRecord.UnitId, pendingRecord.Cost))
                pendingRecord = nil
            end
        end
    end
end)

----------------------------------------------------------------
-- Hook ƒë·∫∑t unit ƒë·ªÉ log v√†o MacroData
----------------------------------------------------------------
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if self == spawnRemote and method == "InvokeServer" and Recording then
        local recordEntry = {
            UnitId    = args[1],
            Origin    = vecToTable(args[2].Origin),
            Direction = vecToTable(args[2].Direction),
            Slot      = args[3],
            Cost      = 0 -- c·∫≠p nh·∫≠t sau khi MoneyChange xu·∫•t hi·ªán
        }
        table.insert(MacroData, recordEntry)
        pendingRecord = recordEntry
    end

    return oldNamecall(self, ...)
end
setreadonly(mt, true)

----------------------------------------------------------------
-- Save & Load MacroData
----------------------------------------------------------------
local function saveMacroData(macroName)
    if macroName == "" then
        warn("‚ö†Ô∏è Ch∆∞a ch·ªçn macro ƒë·ªÉ l∆∞u")
        return
    end
    local path = macroFolder.."/"..macroName..".json"
    writefile(path, HttpService:JSONEncode(MacroData))
    warn(("üíæ ƒê√£ l∆∞u macro %s | Jobs: %d"):format(macroName, #MacroData))
end

local function loadMacroData(macroName)
    local path = macroFolder.."/"..macroName..".json"
    if not isfile(path) then
        warn("‚ö†Ô∏è Macro ch∆∞a t·ªìn t·∫°i:", macroName)
        return {}
    end
    local ok, data = pcall(function()
        return HttpService:JSONDecode(readfile(path))
    end)
    if ok and data then
        return data
    else
        return {}
    end
end

----------------------------------------------------------------
-- Play Macro
local function PlayMacro(macroName)
    local data = loadMacroData(macroName)
    if #data == 0 then
        warn("‚ö†Ô∏è Macro r·ªóng:", macroName)
        return
    end
    warn(("‚ñ∂Ô∏è Play macro %s | T·ªïng jobs: %d"):format(macroName, #data))
    for _, job in ipairs(data) do
        -- ƒê·ª£i ƒë·ªß ti·ªÅn
        repeat task.wait(0.2) until getCurrentMoney() >= job.Cost

        -- Check l·∫ßn cu·ªëi ngay tr∆∞·ªõc khi ƒë·∫∑t
        while getCurrentMoney() < job.Cost do
            task.wait(0.2)
        end

        spawnRemote:InvokeServer(
            job.UnitId,
            {
                Origin    = tableToVec(job.Origin),
                Direction = tableToVec(job.Direction)
            },
            job.Slot
        )
        warn(("‚úÖ ƒê·∫∑t unit %s | Cost %d"):format(job.UnitId, job.Cost))

        -- Delay nh·ªè ƒë·ªÉ tr√°nh spam
        task.wait(.7)
    end
    warn("‚èπÔ∏è Play macro xong:", macroName)
end

----------------------------------------------------------------
--===================  UI PH√çA D∆Ø·ªöI  ==========================--
----------------------------------------------------------------

--// T·∫°o Window
local Window = MacLib:Window({
    Title = "P·ªãa Hub",
    Subtitle = "V√£i P·ªãa",
    Size = UDim2.fromOffset(650, 400),
    Keybind = Enum.KeyCode.RightControl,
    AcrylicBlur = true,
})

local TabGroup     = Window:TabGroup()
local MacroTab     = TabGroup:Tab({ Name = "Macro" })
local macroSection = MacroTab:Section({ Side = "Left", Title = "Macro Settings" })

-- Dropdown tham chi·∫øu ƒë·ªÉ update
local macroDropdown

-- H√†m refresh dropdown
local function refreshDropdown()
    if not macroDropdown then return end
    macroDropdown:SetDropdown(listMacros())
end

-- Input: Create Macro
macroSection:Input({
    Name        = "create macro",
    Placeholder = "Nh·∫≠p t√™n macro...",
    Callback    = function(val)
        local safeName = val:gsub("[^%w_]", "")
        if safeName == "" then return end
        local path = macroFolder.."/"..safeName..".json"
        if not isfile(path) then
            writefile(path, HttpService:JSONEncode({}))
            warn("üìÅ ƒê√£ t·∫°o macro:", safeName)
        else
            warn("‚ö†Ô∏è Macro ƒë√£ t·ªìn t·∫°i:", safeName)
        end
        refreshDropdown() -- c·∫≠p nh·∫≠t ngay khi t·∫°o
    end
})

-- Dropdown: Select Macro
macroDropdown = macroSection:Dropdown({
    Name     = "select macro",
    Options  = listMacros(),
    Multi    = false,
    Default  = settings.selectedMacro,
    Callback = function(option)
        settings.selectedMacro = option
        saveSettings(settings)
        print("Ch·ªçn macro:", option)
    end
})

-- Auto refresh m·ªói 1 gi√¢y
task.spawn(function()
    while task.wait(1) do
        refreshDropdown()
    end
end)

-- Toggle: Record
macroSection:Toggle({
    Name    = "record",
    Default = false,
    Callback = function(state)
        if state then
            -- B·∫Øt ƒë·∫ßu record
            Recording = true
            MacroData = {}
            warn("üî¥ B·∫Øt ƒë·∫ßu Record")
        else
            -- D·ª´ng record v√† l∆∞u
            Recording = false
            saveMacroData(settings.selectedMacro)
            warn("üü¢ D·ª´ng Record, d·ªØ li·ªáu ƒë√£ l∆∞u")
        end
    end
})

-- Toggle: Play
macroSection:Toggle({
    Name    = "play macro",
    Default = settings.playMacro,
    Callback = function(state)
        settings.playMacro = state
        saveSettings(settings)
        if state then
            PlayMacro(settings.selectedMacro)
            settings.playMacro = false
            saveSettings(settings)
        end
    end
})
